{
	// Place your cwmt workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"SQLAlchemy Model CRUD Template": {
		"scope": "python",
		"prefix": "sqmodelcrud",
		"body": [
			"from app.extensions import db",
			"from flask import abort",
			"",
			"# Association table for many-to-many between ${1:ModelA} and ${2:ModelB}",
			"${3:association_table} = db.Table('${3:association_table}',",
			"    db.Column('${4:fk_model_a}', db.Integer, db.ForeignKey('${5:model_a}.id'), primary_key=True),",
			"    db.Column('${6:fk_model_b}', db.Integer, db.ForeignKey('${7:model_b}.id'), primary_key=True)",
			")",
			"",
			"class ${8:MyModel}(db.Model):",
			"    __tablename__ = '${9:my_model}'",
			"",
			"    id = db.Column(db.Integer, primary_key=True)",
			"    name = db.Column(db.String(${10:50}), nullable=${11:False})",
			"",
			"    # Example many-to-many relationship:",
			"    related = db.relationship(",
			"        '${12:OtherModel}', secondary=${3:association_table},",
			"        backref=db.backref('${13:related_backref}', lazy='dynamic')",
			"    )",
			"",
			"    def __init__(self, name):",
			"        self.name = name",
			"",
			"    def __repr__(self):",
			"        return f\"<${8:MyModel}: {self.name}>\"",
			"",
			"    # --- CRUD Operations ---",
			"",
			"    @classmethod",
			"    def create(cls, **kwargs):",
			"        instance = cls(**kwargs)",
			"        db.session.add(instance)",
			"        db.session.commit()",
			"        return instance",
			"",
			"    @classmethod",
			"    def get_all(cls):",
			"        return cls.query.all()",
			"",
			"    @classmethod",
			"    def get_by_id(cls, id):",
			"        instance = cls.query.get(id)",
			"        if not instance:",
			"            abort(404, description=f\"${8:MyModel} with id {id} not found\")",
			"        return instance",
			"",
			"    def update(self, **kwargs):",
			"        for key, value in kwargs.items():",
			"            setattr(self, key, value)",
			"        db.session.commit()",
			"        return self",
			"",
			"    def delete(self):",
			"        db.session.delete(self)",
			"        db.session.commit()"
		],
		"description": "SQLAlchemy model template with many-to-many association and full CRUD operations"
	},
	"Flask CRUD Controller with Templates": {
		"scope": "python",
		"prefix": "crudcontrollerhtml",
		"body": [
			"from flask import Blueprint, request, render_template, redirect, url_for, abort",
			"from app.models.${1:my_model} import ${2:MyModel}",
			"",
			"# Create blueprint for ${2:MyModel}",
			"${1:my_model}_bp = Blueprint('${1:my_model}', __name__, url_prefix='/${1:my_model}')",
			"",
			"# --- CREATE ---",
			"@${1:my_model}_bp.route('/new', methods=['GET', 'POST'])",
			"def create_${1:my_model}():",
			"    if request.method == 'POST':",
			"        data = request.form",
			"        if not data:",
			"            abort(400, description='No input data provided')",
			"        try:",
			"            new_instance = ${2:MyModel}.create(**data)",
			"            return redirect(url_for('${1:my_model}.get_${1:my_model}_by_id', id=new_instance.id))",
			"        except Exception as e:",
			"            abort(400, description=str(e))",
			"    return render_template('${1:my_model}/create.html')",
			"",
			"# --- READ (List All) ---",
			"@${1:my_model}_bp.route('/', methods=['GET'])",
			"def list_${1:my_model}():",
			"    instances = ${2:MyModel}.get_all()",
			"    return render_template('${1:my_model}/list.html', instances=instances)",
			"",
			"# --- READ (Single) ---",
			"@${1:my_model}_bp.route('/<int:id>', methods=['GET'])",
			"def get_${1:my_model}_by_id(id):",
			"    instance = ${2:MyModel}.get_by_id(id)",
			"    return render_template('${1:my_model}/detail.html', instance=instance)",
			"",
			"# --- UPDATE ---",
			"@${1:my_model}_bp.route('/<int:id>/edit', methods=['GET', 'POST'])",
			"def update_${1:my_model}(id):",
			"    instance = ${2:MyModel}.get_by_id(id)",
			"    if request.method == 'POST':",
			"        data = request.form",
			"        if not data:",
			"            abort(400, description='No input data provided')",
			"        try:",
			"            instance.update(**data)",
			"            return redirect(url_for('${1:my_model}.get_${1:my_model}_by_id', id=instance.id))",
			"        except Exception as e:",
			"            abort(400, description=str(e))",
			"    return render_template('${1:my_model}/edit.html', instance=instance)",
			"",
			"# --- DELETE ---",
			"@${1:my_model}_bp.route('/<int:id>/delete', methods=['POST'])",
			"def delete_${1:my_model}(id):",
			"    instance = ${2:MyModel}.get_by_id(id)",
			"    try:",
			"        instance.delete()",
			"        return redirect(url_for('${1:my_model}.list_${1:my_model}'))",
			"    except Exception as e:",
			"        abort(400, description=str(e))"
		],
		"description": "Flask CRUD controller using render_template and redirects for HTML views"
	},
	"Flask App Factory (__init__.py)": {
		"scope": "python",
		"prefix": "initapp",
		"body": [
			"from flask import Flask",
			"from app.config import ${1:Config}",
			"from app.extensions import db, migrate${2:, login_manager}",
			"",
			"def create_app(config_class=${1:Config}):",
			"    app = Flask(__name__)",
			"    app.config.from_object(config_class)",
			"",
			"    # Initialize Flask extensions",
			"    db.init_app(app)",
			"    migrate.init_app(app, db)${2:, login_manager.init_app(app)}",
			"",
			"    # Register Blueprints",
			"    from app.${3:module} import ${4:blueprint} as ${4:bp}",
			"    app.register_blueprint(${4:bp}, url_prefix='/${3:module}')",
			"",
			"    # Register additional blueprints here if needed",
			"    # from app.another_module import another_bp",
			"    # app.register_blueprint(another_bp, url_prefix='/another')",
			"",
			"    return app",
			"",
			"# Uncomment below to run the app directly",
			"# if __name__ == '__main__':",
			"#     app = create_app()",
			"#     app.run(debug=True)"
		],
		"description": "Flask __init__.py file using an application factory pattern with extension initialization and blueprint registration."
	},
	"Custom Decorator Template": {
		"scope": "python",
		"prefix": "custdecorator",
		"body": [
			"from functools import wraps",
			"",
			"def ${1:decorator_name}(${2:optional_args}):",
			"    \"\"\"",
			"    Custom decorator that does something before and after the function call.",
			"    \"\"\"",
			"    def decorator(func):",
			"        @wraps(func)",
			"        def wrapper(*args, **kwargs):",
			"            # --- Pre-processing logic ---",
			"            ${3:# For example, check permissions or log function call}",
			"            print('Executing ${1:decorator_name} on', func.__name__)",
			"",
			"            # Call the original function",
			"            result = func(*args, **kwargs)",
			"",
			"            # --- Post-processing logic ---",
			"            ${4:# For example, modify the result or perform cleanup}",
			"            return result",
			"        return wrapper",
			"    return decorator",
			"",
			"# Example usage:",
			"# @${1:decorator_name}(${2:optional_args})",
			"# def my_function(...):",
			"#     pass"
		],
		"description": "A template for creating a custom Python decorator with pre- and post-processing logic."
	}
}